--- gcc-linaro-4.8-2013.04/gcc/gcc.c.mla~	2013-04-17 22:36:02.854886030 +0200
+++ gcc-linaro-4.8-2013.04/gcc/gcc.c	2013-04-17 22:39:17.789449012 +0200
@@ -2225,16 +2225,6 @@ for_each_path (const struct path_prefix
 		break;
 	    }
 
-	  /* Now try the multiarch path.  */
-	  if (!skip_multi_dir
-	      && !pl->require_machine_suffix && multiarch_dir)
-	    {
-	      memcpy (path + len, multiarch_suffix, multiarch_len + 1);
-	      ret = callback (path, callback_info);
-	      if (ret)
-		break;
-	    }
-
 	  /* Now try the base path.  */
 	  if (!pl->require_machine_suffix
 	      && !(pl->os_multilib ? skip_multi_os_dir : skip_multi_dir))
@@ -2262,6 +2252,16 @@ for_each_path (const struct path_prefix
 	      if (ret)
 		break;
 	    }
+
+	  /* Now try the multiarch path.  */
+	  if (!skip_multi_dir
+	      && !pl->require_machine_suffix && multiarch_dir)
+	    {
+	      memcpy (path + len, multiarch_suffix, multiarch_len + 1);
+	      ret = callback (path, callback_info);
+	      if (ret)
+		break;
+	    }
 	}
       if (pl)
 	break;
@@ -7661,6 +7661,20 @@ set_multilib_dir (void)
 	    ++p;
 	}
 
+      if (first)
+	{
+	  if (this_path_len > 3 
+	      && this_path[0] == '.' 
+	      && this_path[1] == ':'
+	      && this_path[2] == ':')
+	    {
+	      char *new_multiarch_dir = XNEWVEC (char, this_path_len + 1);
+
+	      strncpy (new_multiarch_dir, this_path, this_path_len);
+	      new_multiarch_dir[this_path_len] = '\0';
+	      multiarch_dir = &new_multiarch_dir[3];
+	    }
+	}
       if (ok && first)
 	{
 	  if (this_path_len != 1
--- gcc-linaro-4.8-2013.04/gcc/incpath.c.mla~	2013-04-08 21:06:00.000000000 +0200
+++ gcc-linaro-4.8-2013.04/gcc/incpath.c	2013-04-17 22:48:11.772773302 +0200
@@ -130,7 +130,6 @@ add_standard_paths (const char *sysroot,
   const struct default_include *p;
   int relocated = cpp_relocated();
   size_t len;
-
   if (iprefix && (len = cpp_GCC_INCLUDE_DIR_len) != 0)
     {
       /* Look for directories that start with the standard prefix.
@@ -148,20 +147,21 @@ add_standard_paths (const char *sysroot,
 	      if (!filename_ncmp (p->fname, cpp_GCC_INCLUDE_DIR, len))
 		{
 		  char *str = concat (iprefix, p->fname + len, NULL);
-		  if (p->multilib == 1 && imultilib)
-		    str = reconcat (str, str, dir_separator_str,
-				    imultilib, NULL);
-		  else if (p->multilib == 2)
+		  if (p->multilib && imultilib)
+                    {
+		      str = reconcat (str, str, dir_separator_str, imultilib, NULL);
+		      add_path (str, SYSTEM, p->cxx_aware, false);
+		    }
+		  else
+		    add_path (str, SYSTEM, p->cxx_aware, false);
+
+		  if (p->multilib && imultiarch)
 		    {
-		      if (!imultiarch)
-			{
-			  free (str);
-			  continue;
-			}
+                      char *str = concat (iprefix, p->fname + len, NULL);
 		      str = reconcat (str, str, dir_separator_str,
 				      imultiarch, NULL);
+		      add_path (str, SYSTEM, p->cxx_aware, false);
 		    }
-		  add_path (str, SYSTEM, p->cxx_aware, false);
 		}
 	    }
 	}
@@ -171,7 +171,7 @@ add_standard_paths (const char *sysroot,
     {
       if (!p->cplusplus || cxx_stdinc)
 	{
-	  char *str;
+	  char *str, *str2;
 
 	  /* Should this directory start with the sysroot?  */
 	  if (sysroot && p->add_sysroot)
@@ -215,19 +215,20 @@ add_standard_paths (const char *sysroot,
 	  else
 	    str = update_path (p->fname, p->component);
 
-	  if (p->multilib == 1 && imultilib)
-	    str = reconcat (str, str, dir_separator_str, imultilib, NULL);
-	  else if (p->multilib == 2)
+	  str2 = xstrdup(str);
+	  if (p->multilib && imultilib)
 	    {
-	      if (!imultiarch)
-		{
-		  free (str);
-		  continue;
-		}
-	      str = reconcat (str, str, dir_separator_str, imultiarch, NULL);
+	      str = reconcat (str, str, dir_separator_str, imultilib, NULL);
+	      add_path (str, SYSTEM, p->cxx_aware, false);
 	    }
+	  else
+	    add_path (str, SYSTEM, p->cxx_aware, false);
 
-	  add_path (str, SYSTEM, p->cxx_aware, false);
+	  if (p->multilib && imultiarch)
+	    {
+	      str2 = reconcat (str2, str2, dir_separator_str, imultiarch, NULL);
+	      add_path (str2, SYSTEM, p->cxx_aware, false);
+	    }
 	}
     }
 }
